{"name":"Hunspell","tagline":"","body":"About Hunspell\r\n--------------\r\n\r\nHunspell is a spell checker and morphological analyzer library and program\r\ndesigned for languages with rich morphology and complex word compounding or\r\ncharacter encoding. Hunspell interfaces: Ispell-like terminal interface\r\nusing Curses library, Ispell pipe interface, OpenOffice.org UNO module.\r\n\r\nHunspell's code base comes from the OpenOffice.org MySpell\r\n(http://lingucomponent.openoffice.org/MySpell-3.zip). See README.MYSPELL,\r\nAUTHORS.MYSPELL and license.myspell files.\r\nHunspell is designed to eventually replace Myspell in OpenOffice.org.\r\n\r\nMain features of Hunspell spell checker and morphological analyzer:\r\n\r\n- Unicode support (affix rules work only with the first 65535 Unicode characters)\r\n\r\n- Morphological analysis (in custom item and arrangement style) and stemming\r\n\r\n- Max. 65535 affix classes and twofold affix stripping (for agglutinative\r\n  languages, like Azeri, Basque, Estonian, Finnish, Hungarian, Turkish, etc.)\r\n\r\n- Support complex compoundings (for example, Hungarian and German)\r\n\r\n- Support language specific features (for example, special casing of\r\n  Azeri and Turkish dotted i, or German sharp s)\r\n\r\n- Handle conditional affixes, circumfixes, fogemorphemes,\r\n  forbidden words, pseudoroots and homonyms.\r\n\r\n- Free software (LGPL, GPL, MPL tri-license)\r\n\r\nCompiling on Unix/Linux\r\n-----------------------\r\n\r\n./configure\r\nmake\r\nmake install\r\n\r\nFor dictionary development, use the --with-warnings option of configure.\r\n\r\nFor interactive user interface of Hunspell executable, use the --with-ui option.\r\n\r\nThe developer packages you need to compile Hunspell's interface:\r\n\r\nglibc-devel\r\n\r\noptional developer packages:\r\n\r\nncurses (need for --with-ui)\r\nreadline (for fancy input line editing,\r\n  configure parameter: --with-readline)\r\nlocale and gettext (but you can also use the\r\n  --with-included-gettext configure parameter)\r\n\r\nHunspell distribution uses new Autoconf (2.59) and Automake (1.9).\r\n\r\nCompiling on Windows\r\n--------------------\r\n\r\n1. Compiling with Windows SDK\r\n\r\nDownload the free Windows SDK of Microsoft, open a command prompt\r\nwindow and cd into hunspell/src/win_api. Use the following command\r\nto compile hunspell:\r\n\r\nvcbuild\r\n\r\n2. Compiling in Cygwin environment\r\n\r\nDownload and install Cygwin environment for Windows with the following\r\nextra packages: \r\n\r\nmake\r\ngcc-g++ development package\r\nmingw development package (for cygwin.dll free native Windows compilation)\r\nncurses, readline (for user interface)\r\niconv (character conversion)\r\n\r\n2.1. Cygwin1.dll dependent compiling\r\n\r\nOpen a Cygwin shell, cd into the hunspell root directory:\r\n\r\n./configure\r\nmake\r\nmake install\r\n\r\nFor dictionary development, use the --with-warnings option of configure.\r\n\r\nFor interactive user interface of Hunspell executable, use the --with-ui option.\r\n\r\nreadline configure parameter: --with-readline (for fancy input line editing)\r\n\r\n1.2. Cygwin1.dll free compiling\r\n\r\nOpen a Cygwin shell, cd into the hunspell/src/win_api and\r\n\r\nmake -f Makefile.cygwin\r\n\r\nTesting\r\n-------\r\n\r\nTesting Hunspell (see tests in tests/ subdirectory):\r\n\r\nmake check\r\n\r\nor with Valgrind debugger:\r\n\r\nmake check\r\nVALGRIND=[Valgrind_tool] make check\r\n\r\nFor example:\r\n\r\nmake check\r\nVALGRIND=memcheck make check\r\n\r\nDocumentation\r\n-------------\r\n\r\nfeatures and dictionary format:\r\nman 4 hunspell\r\n\r\nman hunspell\r\nhunspell -h\r\nhttp://hunspell.sourceforge.net\r\n\r\nUsage\r\n-----\r\n\r\nThe src/tools dictionary contains ten executables after compiling\r\n(or some of them are in the src/win_api):\r\n\r\naffixcompress: dictionary generation from large (millions of words) vocabularies\r\n  analyze: example of spell checking, stemming and morphological analysis\r\n  chmorph: example of automatic morphological generation and conversion\r\n  example: example of spell checking and suggestion\r\n hunspell: main program for spell checking and others (see manual)\r\n   hunzip: decompressor of hzip format\r\n     hzip: compressor of hzip format\r\nmakealias: alias compression (Hunspell only, not back compatible with MySpell)\r\n    munch: dictionary generation from vocabularies (it needs an affix file, too).\r\n  unmunch: list all recognized words of a MySpell dictionary\r\nwordforms: word generation (Hunspell version of unmunch)\r\n\r\nAfter compiling and installing (see INSTALL) you can\r\nrun the Hunspell spell checker (compiled with user interface)\r\nwith a Hunspell or Myspell dictionary:\r\n\r\nhunspell -d en_US text.txt\r\n\r\nor without interface:\r\n\r\nhunspell\r\nhunspell -d en_UK -l <text.txt\r\n\r\nDictionaries consist of an affix and dictionary file, see tests/\r\nor http://wiki.services.openoffice.org/wiki/Dictionaries.\r\n\r\nUsing Hunspell library with GCC\r\n-------------------------------\r\n\r\nIncluding in your program:\r\n#include <hunspell.hxx>\r\n\r\nLinking with Hunspell static library:\r\ng++ -lhunspell example.cxx \r\n\r\nDictionaries\r\n------------\r\n\r\nMyspell & Hunspell dictionaries:\r\nhttp://wiki.services.openoffice.org/wiki/Dictionaries\r\n\r\nAspell dictionaries (need some conversion):\r\nftp://ftp.gnu.org/gnu/aspell/dict\r\nConversion steps: see relevant feature request at http://hunspell.sf.net.\r\n\r\nLászló Németh\r\nnemeth at OOo\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}